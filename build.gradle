buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        flatDir {
          dirs 'libs'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
  id 'org.ajoberstar.grgit' version '2.3.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext {
    VERSION_COMPILE = gitVersion("${version_major}.${version_minor}")
    VERSION_THUTCORE = gitVersion("${version_thutcore}")
    // Force a refresh of the toml file
    cleanTOML()
}

version = "${version_minecraft}-${VERSION_COMPILE}"
group = 'thut'
archivesBaseName = "${compile_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${version_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client = {
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            properties '-XX': '+UnlockCommercialFeatures'
            properties '-XX': '+FlightRecorder'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            properties '-XX': '+UnlockCommercialFeatures'
            properties '-XX': '+FlightRecorder'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        data = {
            workingDirectory project.file('run').canonicalPath
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'restrictions', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            source sourceSets.main
        }
    }
}

repositories {
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    flatDir {
        dirs 'libs'
    }
    maven { // Computer Craft
        url 'https://squiddev.cc/maven/' 
    }
        maven { // The repo from which to get waila
        name "Mobius Repo"
        url "https://tehnut.info/maven"
    }
    maven { // JEI
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'OC Repo'
        url "http://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // Minecolonies
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"
    
    //Computer Craft Support.
    implementation fg.deobf("org.squiddev:cc-tweaked-${version_minecraft}:${version_cct}")
    
    //Lost Cities
    implementation "libs:lostcities-${version_lostcities}"
    
    //JEI
    implementation fg.deobf("mezz.jei:jei-${version_minecraft}:${version_jei}")
    
    //WHYLA
    implementation fg.deobf("mcp.mobius.waila:Hwyla:${version_hwyla}")
    
    //Minecolonies
    implementation fg.deobf("libs:minecolonies-${version_minecolonies}")

}

jar {
    manifest {
        attributes 'FMLAT': 'accesstransformer.cfg',
        "Specification-Title": "${compile_name}",
        "Specification-Vendor": "${author_name}",
        "Specification-Version": VERSION_COMPILE,
        "Implementation-Title": project.name,
        "Implementation-Version": VERSION_COMPILE,
        "Implementation-Vendor" :"${author_name}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
}

processResources.doLast {
    def TOMLFILE = "./build/resources/main/META-INF/mods.toml"
    replaceParameters(TOMLFILE, "version_thutcore", VERSION_THUTCORE)
    replaceParameters(TOMLFILE, "version_mc", "${version_mcsupport}")
}

def replaceParameters(filename, find, replace) {
    ant.replace(file:filename,token:find,value:replace)
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
}

artifacts {
	archives sourcesJar
}

def cleanTOML()
{
    delete "./build/resources/main/META-INF/mods.toml" 
}

def gitVersion(value) {
    def raw = grgit.describe(longDescr: true)
    def desc = (raw == null ? 'unknown-offset-hash' : grgit.describe(longDescr: true)).split('-') as List
    def hash = desc.remove(desc.size() - 1)
    def offset = desc.remove(desc.size() - 1)
    def branch = grgit.branch.current().name
    return "${value}.${offset}"
}