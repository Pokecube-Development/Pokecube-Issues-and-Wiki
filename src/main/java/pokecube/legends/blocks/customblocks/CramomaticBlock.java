package pokecube.legends.blocks.customblocks;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;

import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.HorizontalBlock;
import net.minecraft.block.IWaterLoggable;
import net.minecraft.state.BooleanProperty;
import net.minecraft.state.DirectionProperty;
import net.minecraft.state.properties.BlockStateProperties;
import net.minecraft.util.Direction;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.IBooleanFunction;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;

public class CramomaticBlock extends Rotates implements IWaterLoggable {

	private static final Map<Direction, VoxelShape> CRAMOBOT  = new HashMap<>();
    private static final DirectionProperty          FACING      = HorizontalBlock.FACING;
    private static final BooleanProperty            WATERLOGGED = BlockStateProperties.WATERLOGGED;

    // Precise selection box
    static
    {// @formatter:off
    	CramomaticBlock.CRAMOBOT.put(Direction.NORTH,
    	    Stream.of(
    			Block.box(5.169444444444444, 0, 3.458333333333334, 11.169444444444444, 6, 9.458333333333334),
    			Block.box(7.169444444444444, 2, 2.958333333333334, 9.169444444444444, 4, 3.458333333333334),
    			Block.box(3.8694444444444436, 4.9, 5.458333333333334, 12.369444444444444, 5.9, 8.458333333333334),
    			Block.box(4.169444444444444, 5, 6.458333333333334, 5.169444444444444, 12, 7.458333333333334),
    			Block.box(11.169444444444444, 5, 6.458333333333334, 12.169444444444444, 12, 7.458333333333334),
    			Block.box(4.169444444444444, 10, 11.458333333333334, 5.169444444444444, 11, 12.458333333333334),
    			Block.box(11.169444444444444, 8, 11.458333333333334, 12.169444444444444, 11, 12.458333333333334),
    			Block.box(4.169444444444444, 11, 7.458333333333334, 5.169444444444444, 12, 12.458333333333334),
    			Block.box(11.169444444444444, 11, 7.458333333333334, 12.169444444444444, 12, 12.458333333333334),
    			Block.box(7.169444444444444, 6, 4.458333333333334, 9.169444444444444, 7, 8.458333333333334),
    			Block.box(7.169444444444444, 7, 5.458333333333334, 9.169444444444444, 11, 7.458333333333334),
    			Block.box(6.169444444444444, 11, 4.458333333333334, 10.169444444444444, 15, 8.458333333333334),
    			Block.box(5.829444444444444, 12.69779, 4.235333333333333, 10.509444444444444, 15.302210000000002, 8.681333333333333),
    			Block.box(7.169444444444444, 12, 3.458333333333334, 9.169444444444444, 13, 5.458333333333334),
    			Block.box(5.669444444444444, 11.1, 0.4583333333333339, 10.669444444444444, 12.1, 6.458333333333334),
    			Block.box(3.1694444444444443, 0, 9.458333333333334, 13.169444444444444, 8, 14.458333333333334),
    			Block.box(6.169444444444444, 8, 11.458333333333334, 11.169444444444444, 10, 12.458333333333334),
    			Block.box(3.1694444444444443, 8, 9.458333333333334, 6.169444444444444, 10, 14.458333333333334)
    	    ).reduce((v1, v2) -> {return VoxelShapes.join(v1, v2, IBooleanFunction.OR);}).get());
    	CramomaticBlock.CRAMOBOT.put(Direction.SOUTH,
    	    Stream.of(
	    		Block.box(4.830555555555556, 0, 6.541666666666666, 10.830555555555556, 6, 12.541666666666666),
	    		Block.box(6.830555555555556, 2, 12.541666666666666, 8.830555555555556, 4, 13.041666666666666),
	    		Block.box(3.6305555555555564, 4.9, 7.541666666666666, 12.130555555555556, 5.9, 10.541666666666666),
	    		Block.box(10.830555555555556, 5, 8.541666666666666, 11.830555555555556, 12, 9.541666666666666),
	    		Block.box(3.8305555555555557, 5, 8.541666666666666, 4.830555555555556, 12, 9.541666666666666),
	    		Block.box(10.830555555555556, 10, 3.541666666666666, 11.830555555555556, 11, 4.541666666666666),
	    		Block.box(3.8305555555555557, 8, 3.541666666666666, 4.830555555555556, 11, 4.541666666666666),
	    		Block.box(10.830555555555556, 11, 3.541666666666666, 11.830555555555556, 12, 8.541666666666666),
	    		Block.box(3.8305555555555557, 11, 3.541666666666666, 4.830555555555556, 12, 8.541666666666666),
	    		Block.box(6.830555555555556, 6, 7.541666666666666, 8.830555555555556, 7, 11.541666666666666),
	    		Block.box(6.830555555555556, 7, 8.541666666666666, 8.830555555555556, 11, 10.541666666666666),
	    		Block.box(5.830555555555556, 11, 7.541666666666666, 9.830555555555556, 15, 11.541666666666666),
	    		Block.box(5.490555555555556, 12.69779, 7.318666666666667, 10.170555555555556, 15.302210000000002, 11.764666666666667),
	    		Block.box(6.830555555555556, 12, 10.541666666666666, 8.830555555555556, 13, 12.541666666666666),
	    		Block.box(5.330555555555556, 11.1, 9.541666666666666, 10.330555555555556, 12.1, 15.541666666666666),
	    		Block.box(2.8305555555555557, 0, 1.541666666666666, 12.830555555555556, 8, 6.541666666666666),
	    		Block.box(4.830555555555556, 8, 3.541666666666666, 9.830555555555556, 10, 4.541666666666666),
	    		Block.box(9.830555555555556, 8, 1.541666666666666, 12.830555555555556, 10, 6.541666666666666)
	    ).reduce((v1, v2) -> {return VoxelShapes.join(v1, v2, IBooleanFunction.OR);}).get());
    	CramomaticBlock.CRAMOBOT.put(Direction.WEST,
    	    Stream.of(
	    		Block.box(3.458333333333334, 0, 4.830555555555556, 9.458333333333334, 6, 10.830555555555556),
	    		Block.box(2.958333333333334, 2, 6.830555555555556, 3.458333333333334, 4, 8.830555555555556),
	    		Block.box(5.458333333333334, 4.9, 3.6305555555555564, 8.458333333333334, 5.9, 12.130555555555556),
	    		Block.box(6.458333333333334, 5, 10.830555555555556, 7.458333333333334, 12, 11.830555555555556),
	    		Block.box(6.458333333333334, 5, 3.8305555555555557, 7.458333333333334, 12, 4.830555555555556),
	    		Block.box(11.458333333333334, 10, 10.830555555555556, 12.458333333333334, 11, 11.830555555555556),
	    		Block.box(11.458333333333334, 8, 3.8305555555555557, 12.458333333333334, 11, 4.830555555555556),
	    		Block.box(7.458333333333334, 11, 10.830555555555556, 12.458333333333334, 12, 11.830555555555556),
	    		Block.box(7.458333333333334, 11, 3.8305555555555557, 12.458333333333334, 12, 4.830555555555556),
	    		Block.box(4.458333333333334, 6, 6.830555555555556, 8.458333333333334, 7, 8.830555555555556),
	    		Block.box(5.458333333333334, 7, 6.830555555555556, 7.458333333333334, 11, 8.830555555555556),
	    		Block.box(4.458333333333334, 11, 5.830555555555556, 8.458333333333334, 15, 9.830555555555556),
	    		Block.box(4.235333333333333, 12.69779, 5.490555555555556, 8.681333333333333, 15.302210000000002, 10.170555555555556),
	    		Block.box(3.458333333333334, 12, 6.830555555555556, 5.458333333333334, 13, 8.830555555555556),
	    		Block.box(0.4583333333333339, 11.1, 5.330555555555556, 6.458333333333334, 12.1, 10.330555555555556),
	    		Block.box(9.458333333333334, 0, 2.8305555555555557, 14.458333333333334, 8, 12.830555555555556),
	    		Block.box(11.458333333333334, 8, 4.830555555555556, 12.458333333333334, 10, 9.830555555555556),
	    		Block.box(9.458333333333334, 8, 9.830555555555556, 14.458333333333334, 10, 12.830555555555556)
    	    ).reduce((v1, v2) -> {return VoxelShapes.join(v1, v2, IBooleanFunction.OR);}).get());
    	CramomaticBlock.CRAMOBOT.put(Direction.EAST,
    	    Stream.of(
	    		Block.box(6.541666666666666, 0, 5.169444444444444, 12.541666666666666, 6, 11.169444444444444),
	    		Block.box(12.541666666666666, 2, 7.169444444444444, 13.041666666666666, 4, 9.169444444444444),
	    		Block.box(7.541666666666666, 4.9, 3.8694444444444436, 10.541666666666666, 5.9, 12.369444444444444),
	    		Block.box(8.541666666666666, 5, 4.169444444444444, 9.541666666666666, 12, 5.169444444444444),
	    		Block.box(8.541666666666666, 5, 11.169444444444444, 9.541666666666666, 12, 12.169444444444444),
	    		Block.box(3.541666666666666, 10, 4.169444444444444, 4.541666666666666, 11, 5.169444444444444),
	    		Block.box(3.541666666666666, 8, 11.169444444444444, 4.541666666666666, 11, 12.169444444444444),
	    		Block.box(3.541666666666666, 11, 4.169444444444444, 8.541666666666666, 12, 5.169444444444444),
	    		Block.box(3.541666666666666, 11, 11.169444444444444, 8.541666666666666, 12, 12.169444444444444),
	    		Block.box(7.541666666666666, 6, 7.169444444444444, 11.541666666666666, 7, 9.169444444444444),
	    		Block.box(8.541666666666666, 7, 7.169444444444444, 10.541666666666666, 11, 9.169444444444444),
	    		Block.box(7.541666666666666, 11, 6.169444444444444, 11.541666666666666, 15, 10.169444444444444),
	    		Block.box(7.318666666666667, 12.69779, 5.829444444444444, 11.764666666666667, 15.302210000000002, 10.509444444444444),
	    		Block.box(10.541666666666666, 12, 7.169444444444444, 12.541666666666666, 13, 9.169444444444444),
	    		Block.box(9.541666666666666, 11.1, 5.669444444444444, 15.541666666666666, 12.1, 10.669444444444444),
	    		Block.box(1.541666666666666, 0, 3.1694444444444443, 6.541666666666666, 8, 13.169444444444444),
	    		Block.box(3.541666666666666, 8, 6.169444444444444, 4.541666666666666, 10, 11.169444444444444),
	    		Block.box(1.541666666666666, 8, 3.1694444444444443, 6.541666666666666, 10, 6.169444444444444)
    	    ).reduce((v1, v2) -> {return VoxelShapes.join(v1, v2, IBooleanFunction.OR);}).get());
    }
    
	@Override
    public VoxelShape getShape(final BlockState state, final IBlockReader worldIn, final BlockPos pos,
            final ISelectionContext context)
    {
		return CramomaticBlock.CRAMOBOT.get(state.getValue(CramomaticBlock.FACING));
    }
	
	public CramomaticBlock(final Properties props)
    {
        super(props);
        this.registerDefaultState(this.stateDefinition.any().setValue(CramomaticBlock.FACING, Direction.NORTH).setValue(
        		CramomaticBlock.WATERLOGGED, false));
    }
}